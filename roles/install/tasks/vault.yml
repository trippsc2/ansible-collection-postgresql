---
- name: Configure Vault database connection
  when:
    - pgsql_configure_vault_database_connection
  block:
    - name: Create Vault database mount point
      when:
        - pgsql_create_vault_secret_engines
      delegate_to: localhost
      pag.hashi_vault.vault_database_secret_engine:
        token: "{{ vault_token | default(omit) }}"
        url: "{{ vault_url | default(omit) }}"
        engine_mount_point: "{{ pgsql_vault_database_mount_point }}"
        state: present
    
    - name: Configure Vault database connection
      block:
        - name: Check for Vault database connection
          delegate_to: localhost
          community.hashi_vault.vault_database_connection_read:
            token: "{{ vault_token | default(omit) }}"
            url: "{{ vault_url | default(omit) }}"
            engine_mount_point: "{{ pgsql_vault_database_mount_point }}"
            connection_name: "{{ inventory_hostname | lower }}"
      rescue:
        - name: Create Hashicorp Vault user
          become: true
          become_user: postgres
          vars:
            ansible_ssh_pipelining: true
          community.postgresql.postgresql_user:
            name: "{{ pgsql_vault_user }}"
            password: T3mp0r@ry1234!
            role_attr_flags: SUPERUSER
            state: present

        - name: Configure Vault database connection
          delegate_to: localhost
          community.hashi_vault.vault_database_connection_configure:
            token: "{{ vault_token | default(omit) }}"
            url: "{{ vault_url | default(omit) }}"
            engine_mount_point: "{{ pgsql_vault_database_mount_point }}"
            connection_name: "{{ inventory_hostname | lower }}"
            plugin_name: postgresql-database-plugin
            connection_url: "postgresql://{{ '{{username}}' }}:{{ '{{password}}' }}@{{ pgsql_vault_access_hostname }}:5432/postgres?sslmode={{ pgsql_vault_ssl_mode }}"
            allowed_roles:
              - '*'
            connection_username: "{{ pgsql_vault_user }}"
            connection_password: T3mp0r@ry1234!

- name: Configure monitoring
  when:
    - pgsql_configure_monitoring
  block:
    - name: Configure Vault monitoring secret
      when:
        - pgsql_vault_managed_monitoring_credentials
      block:
        - name: Create Vault monitoring mount point
          when:
            - pgsql_create_vault_secret_engines
          delegate_to: localhost
          pag.hashi_vault.vault_kv2_secret_engine:
            token: "{{ vault_token | default(omit) }}"
            url: "{{ vault_url | default(omit) }}"
            engine_mount_point: "{{ pgsql_vault_monitor_mount_point }}"
            state: present

        - name: Configure monitoring secret
          block:
            - name: Check for monitoring secret
              delegate_to: localhost
              community.hashi_vault.vault_kv2_get:
                token: "{{ vault_token | default(omit) }}"
                url: "{{ vault_url | default(omit) }}"
                engine_mount_point: "{{ pgsql_vault_monitor_mount_point }}"
                path: "{{ pgsql_vault_monitor_path }}"
              register: _vault_monitor_secret

            - name: Set variable to Vault secret, if present
              ansible.builtin.set_fact:
                pgsql_monitoring_password: "{{ _vault_monitor_secret.data.data.password }}"
          rescue:
            - name: Generate a new password
              ansible.builtin.set_fact:
                pgsql_monitoring_password: >-
                  {{ lookup('ansible.builtin.password',
                            '/dev/null chars=ascii_lowercase,ascii_uppercase,digits,punctuation length=20') }}

            - name: Store monitoring secret
              delegate_to: localhost
              community.hashi_vault.vault_kv2_write:
                token: "{{ vault_token | default(omit) }}"
                url: "{{ vault_url | default(omit) }}"
                engine_mount_point: "{{ pgsql_vault_monitor_mount_point }}"
                path: "{{ pgsql_vault_monitor_path }}"
                data:
                  username: "{{ pgsql_monitoring_user }}"
                  password: "{{ pgsql_monitoring_password }}"

    - name: Create monitoring user
      become: true
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
      community.postgresql.postgresql_user:
        name: "{{ pgsql_monitoring_user }}"
        password: "{{ pgsql_monitoring_password }}"
        state: present

    - name: Provide monitoring user with access to monitoring functions
      loop:
        - pg_ls_dir(text)
        - pg_stat_file(text)
        - pg_ls_waldir()
      become: true
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
      community.postgresql.postgresql_privs:
        database: postgres
        type: function
        objs: "{{ item }}"
        roles: "{{ pgsql_monitoring_user }}"
        privs: EXECUTE
        schema: pg_catalog
        state: present
